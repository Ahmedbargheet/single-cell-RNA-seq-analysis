---
title: "Dimentionality reduction"
author: "Ahmed Bargheet, PhD"
title-block-banner: true
format:
  html:
    theme: flatly
    toc: true
    toc-location: left
    number-sections: true
    code-fold: true
execute:
  warning: false
  message: false
editor: visual
params:
  rds_path: "/Users/aba189/Downloads/nsclc_seurat_sct.rds"
---

# Import libraries

```{r}
library(tidyverse)
library(Seurat)
library(hdf5r)
library(patchwork)
library(RColorBrewer)
```

# Feature selection

I have already picked the top variable genes (n = 3000) during normalization

```{r}
#| eval: false
nsclc.seurat.obj_n <- SCTransform(nsclc.seurat.obj_f, 
                                vars.to.regress = "percent.mt", verbose = FALSE,
                                conserve.memory = TRUE, variable.features.n = 3000)
```

```{r, echo=FALSE}
rds_path <- ifelse(Sys.getenv("SEURAT_RDS") != "", Sys.getenv("SEURAT_RDS"), params$rds_path)
nsclc.seurat.obj_n <- readRDS(rds_path)
```

Identify the 10 most highly variable genes

```{r}
top10 <- VariableFeatures(nsclc.seurat.obj_n) %>% head(10)  # first 10 variable genes

top10

length(VariableFeatures(nsclc.seurat.obj_n)) # how many kept

```

## plot variable features

```{r}

LabelPoints(plot = VariableFeaturePlot(nsclc.seurat.obj_n), points = top10, repel = TRUE)
```

# Dimensionality reduction

```{r}
nsclc.seurat.obj_dr <- RunPCA(nsclc.seurat.obj_n, 
                           features = VariableFeatures(object = nsclc.seurat.obj_n))

# visualize PCA results
print(nsclc.seurat.obj_dr[["pca"]], dims = 1:5, nfeatures = 10)
DimHeatmap(nsclc.seurat.obj_dr, dims = 1, cells = 500, balanced = TRUE)

# determine dimensionality of the data
ElbowPlot(nsclc.seurat.obj_dr)
```

# Clustering

## Build neighbor graph using top PCs

Finds cells with similar gene expression patterns (in PCA space)

```{r}
nsclc.seurat.obj_dr <- FindNeighbors(nsclc.seurat.obj_dr, dims = 1:15)
```

## Cluster cells at chosen resolution

Groups cells into clusters based on the neighbor graph

```{r}
nsclc.seurat.obj_dr <- FindClusters(nsclc.seurat.obj_dr, resolution = c(0.1, 0.3, 0.5, 0.7, 1))

```

## Choose the best resolution

### Run UMAP for visualization

```{r}
nsclc.seurat.obj_dr <- RunUMAP(nsclc.seurat.obj_dr, dims = 1:15)
```

### Plot

Best resolution:

-   Clusters are well separated on UMAP (little overlap)

-   Same cells should not be separated into different clusters.

```{r}
p1 <- DimPlot(nsclc.seurat.obj_dr, reduction = "umap", group.by = "SCT_snn_res.0.1", 
             label = TRUE) + ggtitle("res = 0.1")

p2 <- DimPlot(nsclc.seurat.obj_dr, reduction = "umap", group.by = "SCT_snn_res.0.3", 
              label = TRUE) + ggtitle("res = 0.3")
p3 <- DimPlot(nsclc.seurat.obj_dr, reduction = "umap", group.by = "SCT_snn_res.0.5", 
              label = TRUE) + ggtitle("res = 0.5")

p4 <- DimPlot(nsclc.seurat.obj_dr, reduction = "umap", group.by = "SCT_snn_res.0.7", 
              label = TRUE) + ggtitle("res = 0.7")

#(p1 | p2) / (p3 | plot_spacer()) + plot_layout(widths = c(10,10))

#(p1 | p2) / (p3 | p4)

(p1 | p2) / (p3 | p4) + plot_layout(guides = "collect") & theme(legend.position = "none")

```

### Setting identity of clusters

Set the identity to resolution = 0.5, since it produced the most meaningful clusters.

```{r}
Idents(nsclc.seurat.obj_dr) <- "SCT_snn_res.0.5"
DimPlot(nsclc.seurat.obj_dr, reduction = "umap", label = TRUE) + 
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Set2")) (16))
```
